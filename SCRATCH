(progn (print-hyperlink (hyperlink 7) nil 1) (terpri) (terpri))




‚ä•
‚àÄ
‚áí
‚à∑
‚Åû
‚Üí
‚Üê
∆≠
∆Æ
∆á
‚òÖ
‚Ü¶
‚ãô
‚àò
‚´¥
‚â´=
‚Üµ
Ì¥π

ùîπ


{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE PatternSynonyms #-}

ProblemParser.Internal (provides "external" API, for use by ProblemParser)
ProblemParser.Internal.ProblemNumber
ProblemParser.Internal.ProblemDescription
ProblemParser.Internal.Premises
ProblemParser.Internal.Interests
ProblemParser.Internal.Reasons
ProblemParser.Internal.Strategies.Stateful
ProblemParser.Internal.Strategies.Sectional
ProblemParser.Internal.Variables
ProblemParser.Internal.UnitInterval (degrees?)

git checkout -b feature-name
git add -A :/ 
git commit -m 

{-
import philosophy:
    use highest-level available (easier to write; less likely to need changes when API changes)
    separate 

module creation philosophy:
    reasons to place identifiers in separate modules
        to reduce the need for name mangling (e.g. lazy and strict Text would need different names if they were placed in the same module)
    reasons to place identifiers in the same module
        to avoid orphan instances
        to collect related "functionality"
        instances go with data or class

    identifiers should be placed in separate modules when they are:
        responsible for different domains of a problem

export philosophy:
-}





--class FromTo from to | from ‚Üí to, to ‚Üí from where
--class FromTo from to | from ‚Üí to where
--class FromTo from to where

class FromTo from to | from ‚Üí to, to ‚Üí from where
    fromTo ‚à∑ from ‚Üí to

class PullFrom from to | to ‚Üí from where
    pullFrom ‚à∑ from ‚Üí to

class PushTo from to | from ‚Üí to where
--class FromTo from to where
    pushTo ‚à∑ from ‚Üí to

data A = A
data B = B
data C = C
data D = D

foo ‚à∑ A ‚Üí C
foo = pushTo . pushTo

instance PushTo A B where
    pushTo A = B

instance PushTo B C where
    pushTo B = C

instance PushTo D C where
    pushTo D = C

instance PushTo (ReasonBlock Forwards defeasibility) (ProblemReasonName, ForwardsReason, ProblemStrengthDegree) where
    pushTo = fpfrts

instance FromTo (Text ‚Åû ∆ÆReason Backwards defeasibility) (([Text], [Text], Text) ‚Åû ∆ÆReason Backwards defeasibility) where
    fromTo = extractFromProblemReasonTextBackwards

instance ‚àÄ kind. (HasSection kind) ‚áí PullFrom (Text ‚Åû ∆ÆAfter ProblemDescription) (Text ‚Åû kind) where
    pullFrom = problemSectionText

class IsAKind kind where

instance IsAKind ∆ÆGivenPremise where
instance IsAKind ∆ÆUltimateEpistemicInterest where
instance IsAKind (∆ÆReason direction defeasibility) where

instance (IsAKind kind, InjectiveSection kind decode) ‚áí PullFrom (Text ‚Åû kind) decode where
    pullFrom = decodeSection












-- | The 'ProblemNumber' is identified at the top of the text block
--instance StatefulParse ProblemNumber
--                       ∆ÆProblemAfterNumberLabel
--                       ∆ÆProblemAfterNumber
--  where
--    statefulParse = ∆≠ $ ProblemNumber . read <$>
--        manyTill anyChar (lookAhead . try $ space)


---- | Parsing of the problem description starts immediately after the problem number and leaves the parser in a location immediately after the description.
--instance StatefulParse ProblemDescription
--                       ∆ÆProblemAfterNumber
--                       ∆ÆProblemAfterDescription
--  where
--    statefulParse = ∆≠ $ spaces >> ProblemDescription . pack <$> p
--      where
--        p = manyTill anyChar $ lookAhead . try $ spaces >> sectionParser


module Oscar.ProblemParser.Tags where


import ClassyPrelude hiding (
    try,
    )
import Prelude                          (read)

import Control.Applicative              (many)
import Control.Monad                    ((<=<))
import Text.Parsec                      (anyChar)
import Text.Parsec                      (char)
import Text.Parsec                      (eof)
import Text.Parsec                      (lookAhead)
import Text.Parsec                      (manyTill)
import Text.Parsec                      (notFollowedBy)
import Text.Parsec                      (option)
import Text.Parsec                      (space)
import Text.Parsec                      (spaces)
import Text.Parsec                      (string)
import Text.Parsec                      (try)
import Text.Parsec.Text                 (Parser)

import Oscar.Formula                    (Formula)
import Oscar.Formula                    (formulaFromText)
import Oscar.ProblemDoubleParser        (LispPositiveDouble)
import Oscar.ProblemDoubleParser        (LispPositiveDouble(LispPositiveDouble))
import Oscar.ProblemDoubleParser        (parserLispPositiveDouble)
import Oscar.ProblemLocation            (∆áPlace)
import Oscar.ProblemLocation            (∆ÆAfter)
import Oscar.ProblemLocation            (∆ÆSection)
import Oscar.ProblemSection             (Section(Section'BackwardsConclusiveReasons))
import Oscar.ProblemSection             (Section(Section'BackwardsPrimaFacieReasons))
import Oscar.ProblemSection             (Section(Section'ForwardsConclusiveReasons))
import Oscar.ProblemSection             (Section(Section'ForwardsPrimaFacieReasons))
import Oscar.ProblemSection             (Section(Section'GivenPremises))
import Oscar.ProblemSection             (Section(Section'UltimateEpistemicInterests))
import Oscar.ProblemSection             (sectionParser)
import Oscar.ProblemSectionDecoder      (DecodedSection)
import Oscar.ProblemSectionDecoder      (decodeSection)
import Oscar.ProblemSectionDecoder      (HasSection)
import Oscar.ProblemSectionDecoder      (InjectiveSection)
import Oscar.ProblemSectionDecoder      (section)
import Oscar.ProblemStatefulParse       (runStatefulParse)
import Oscar.ProblemStatefulParse       (StatefulParse)
import Oscar.ProblemStatefulParse       (statefulParse)
import Oscar.Utilities                  (precededBy)
import Oscar.Utilities                  (simpleParse)
import Oscar.Utilities                  (type (‚Åû))
import Oscar.Utilities                  (un∆≠)
import Oscar.Utilities                  (withInput)
import Oscar.Utilities                  (∆≠)
import Oscar.Utilities                  ((‚ä•))


{-# LANGUAGE DataKinds #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE UnicodeSyntax #-}

module Oscar.ProblemParser.Internal (
    -- * primitive API, in order of intended usage
    -- * module "Oscar.ProblemParser.Internal.ProblemNumber",
    statefulParseProblemNumber,
    -- * module "Oscar.ProblemParser.Internal.ProblemDescription",
    statefulParseProblemDescription,

    -- * using "Oscar.ProblemParser.Internal.SectionDecoder"
    problemSectionText,
    decodeGivenPremisesSection,
    decodeUltimateEpistemicInterestsSection,
    decodeForwardsPrimaFacieReasonSection,
    decodeForwardsConclusiveReasonSection,
    decodeBackwardsPrimaFacieReasonSection,
    decodeBackwardsConclusiveReasonSection,
  ) where

import Oscar.ProblemParser.Internal.ProblemNumber       (statefulParseProblemNumber)
import Oscar.ProblemParser.Internal.ProblemDescription  (statefulParseProblemDescription)
import Oscar.ProblemParser.Internal.SectionDecoder      (problemSectionText)
import Oscar.ProblemParser.Internal.SectionDecoder      (decodeGivenPremisesSection)
import Oscar.ProblemParser.Internal.SectionDecoder      (decodeUltimateEpistemicInterestsSection)
import Oscar.ProblemParser.Internal.SectionDecoder      (decodeForwardsPrimaFacieReasonSection)
import Oscar.ProblemParser.Internal.SectionDecoder      (decodeForwardsConclusiveReasonSection)
import Oscar.ProblemParser.Internal.SectionDecoder      (decodeBackwardsPrimaFacieReasonSection)
import Oscar.ProblemParser.Internal.SectionDecoder      (decodeBackwardsConclusiveReasonSection)

-- | A partially-processed reason section
type ReasonSection (direction ‚à∑ Direction) (defeasibility ‚à∑ Defeasibility) =
    ( ProblemReasonName
    , Text ‚Åû ∆ÆReason direction defeasibility
    , Text ‚Åû ∆ÆProblemVariables
    , ProblemStrengthDegree
    )

_rsProblemReasonName ‚à∑ ReasonSection direction defeasibility ‚Üí ProblemReasonName
_rsProblemReasonName (n, _, _, _) = n

_rsProblemReasonText ‚à∑ ReasonSection direction defeasibility ‚Üí Text ‚Åû ∆ÆReason direction defeasibility
_rsProblemReasonText (_, t, _, _) = t

_rsProblemVariables ‚à∑ ReasonSection direction defeasibility ‚Üí Text ‚Åû ∆ÆProblemVariables
_rsProblemVariables (_, _, v, _) = v

_rsProblemStrengthDegree ‚à∑ ReasonSection direction defeasibility ‚Üí ProblemStrengthDegree
_rsProblemStrengthDegree (_, _, _, d) = d
















{-# LANGUAGE DataKinds #-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE RecordWildCards #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE ViewPatterns #-}
{-# LANGUAGE UnicodeSyntax #-}
module Oscar.ProblemParser.Internal.Internal (
    -- * helper API for statefulParse...
    runStatefulParse',
    parseProblemNumber,
    parseProblemDescription,
    -- * helper API for decode...Section
    -- ** all sections
    runSectionParser,
    -- ** reason sections
    decodeReasonSection,
    getForwardsReason,
    getBackwardsReason,
    -- * Problem data
    Problem(..),
    -- * stateful stuff
    runStatefulParse',
    parseProblemNumber,
    parseProblemDescription,
    -- * parts of a problem
        -- ** ProblemNumber
        ProblemNumber(..),
        statefulParseProblemNumber,
        -- ** ProblemDescription
        ProblemDescription(..),
        statefulParseProblemDescription,
        -- ** ReasonSection
        ReasonSection,
        _rsProblemReasonName,
        _rsProblemReasonText,
        _rsProblemVariables,
        _rsProblemStrengthDegree,
        decodeReasonSection,
        -- ** premises, interests, reasons
        ProblemPremise,
        ProblemInterest,
        ProblemForwardsPrimaFacieReason,
        ProblemForwardsConclusiveReason,
        ProblemBackwardsPrimaFacieReason,
        ProblemBackwardsConclusiveReason,
            -- *** parts of a reason
            ProblemReasonName(..),
            ForwardsReason(..),
            BackwardsReason(..),
        -- ** degrees
        ProblemJustificationDegree(..),
        ProblemInterestDegree(..),
        ProblemStrengthDegree(..),
    -- * API
        -- ** other
        readProblemsTextFile,
        partitionProblemsText,
        problemFromText,
    -- * section decoders
    decodeGivenPremisesSection,
    decodeUltimateEpistemicInterestsSection,
    decodeForwardsPrimaFacieReasonSection,
    decodeForwardsConclusiveReasonSection,
    decodeBackwardsPrimaFacieReasonSection,
    decodeBackwardsConclusiveReasonSection,
    -- * reason parsers
    getForwardsReason,
    getBackwardsReason,
    -- * reason modifiers
    Direction(..),
    Defeasibility(..),
    -- * useful for tags
    ∆ÆProblemAfterNumberLabel,
    ∆ÆProblemAfterNumber,
    ∆ÆProblemAfterDescription,
    ∆ÆGivenPremise,
    ∆ÆUltimateEpistemicInterest,
    ∆ÆReason,
    ∆ÆProblemVariables,
    -- * parsers
    parserProblemJustificationDegree,
    parserProblemInterestDegree,
    parserProblemVariablesText,
    parserProblemStrengthDegree,
    parserProblemReasonName,
    parserEnbracedTexts,
    -- * all the rest
    runSectionParser,
    problemSectionText,
    ) where

import ClassyPrelude hiding (
    try,
    )
import Prelude                          (read)

import Control.Applicative              (many)
import Control.Conditional              (guardM)
import Control.Monad                    ((<=<))
import Text.Parsec                      (anyChar)
import Text.Parsec                      (char)
import Text.Parsec                      (eof)
import Text.Parsec                      (lookAhead)
import Text.Parsec                      (manyTill)
import Text.Parsec                      (notFollowedBy)
import Text.Parsec                      (option)
import Text.Parsec                      (space)
import Text.Parsec                      (spaces)
import Text.Parsec                      (string)
import Text.Parsec                      (try)
import Text.Parsec.Text                 (Parser)

import Oscar.Formula                    (Formula)
import Oscar.Formula                    (formulaFromText)
import Oscar.ProblemDoubleParser        (LispPositiveDouble)
import Oscar.ProblemDoubleParser        (LispPositiveDouble(LispPositiveDouble))
import Oscar.ProblemDoubleParser        (parserLispPositiveDouble)
import Oscar.ProblemLocation            (∆áPlace)
import Oscar.ProblemLocation            (∆ÆAfter)
import Oscar.ProblemLocation            (∆ÆSection)
import Oscar.ProblemSection             (Section(Section'BackwardsConclusiveReasons))
import Oscar.ProblemSection             (Section(Section'BackwardsPrimaFacieReasons))
import Oscar.ProblemSection             (Section(Section'ForwardsConclusiveReasons))
import Oscar.ProblemSection             (Section(Section'ForwardsPrimaFacieReasons))
import Oscar.ProblemSection             (Section(Section'GivenPremises))
import Oscar.ProblemSection             (Section(Section'UltimateEpistemicInterests))
import Oscar.ProblemSection             (sectionParser)
import Oscar.ProblemSectionDecoder      (DecodedSection)
import Oscar.ProblemSectionDecoder      (decodeSection)
import Oscar.ProblemSectionDecoder      (HasSection)
import Oscar.ProblemSectionDecoder      (InjectiveSection)
import Oscar.ProblemSectionDecoder      (section)
import Oscar.ProblemStatefulParse       (runStatefulParse)
import Oscar.ProblemStatefulParse       (StatefulParse)
import Oscar.ProblemStatefulParse       (statefulParse)
import Oscar.Utilities                  (precededBy)
import Oscar.Utilities                  (simpleParse)
import Oscar.Utilities                  (type (‚Åû))
import Oscar.Utilities                  (un∆≠)
import Oscar.Utilities                  (withInput)
import Oscar.Utilities                  (∆≠)
import Oscar.Utilities                  ((‚ä•))

-- | The orientation of a reason.
data Direction
    = Forwards   -- ^ For reasons that require matching premises to draw new conclusions
    | Backwards  -- ^ For reasons that require matching conclusions to draw new interests
  deriving (Show)

-- | The defeasibility of a reason
data Defeasibility
    = PrimaFacie  -- ^ For reasons whose conclusions can be undercut or rebutted
    | Conclusive  -- ^ For reasons whose conclusions are logical consequences of their premises
  deriving (Show)







class ∆áPlace place where

-- | For use in 'Tagged' (or '`‚Åû`') annotations. `‚Åû`
data ∆áPlace place ‚áí ∆ÆAfter place

-- | Stuff after the "Problem #"
data ∆ÆProblemAfterNumberLabel

-- | Stuff after the "Problem #<number>"
data ∆ÆProblemAfterNumber

-- | Stuff after the "Problem #<number>\n<description>" (and starting at the first section)
data ∆ÆProblemAfterDescription

-- | Variables for a reason
data ∆ÆProblemVariables



















{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE UnicodeSyntax #-}

module Oscar.ProblemParser.Internal.SectionDecoder (
    Section(..),
    sectionParser,
    HasSection,
    ∆ÆGivenPremise,
    ∆ÆUltimateEpistemicInterest,
    ∆ÆReason,
    problemSectionText,
    decodeGivenPremisesSection,
    decodeUltimateEpistemicInterestsSection,
    decodeReasonSection,
    decodeForwardsPrimaFacieReasonSection,
    decodeForwardsConclusiveReasonSection,
    decodeBackwardsPrimaFacieReasonSection,
    decodeBackwardsConclusiveReasonSection,
  ) where

import ClassyPrelude hiding (
    try,
    )

import Control.Applicative              (empty)
import Text.Parsec                      (string)
import Text.Parsec                      (try)
import Text.Parsec.Text                 (Parser)

-- |












































{-# LANGUAGE FunctionalDependencies #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE UnicodeSyntax #-}

module Oscar.ProblemParser.Internal.StatefulParse (
    runStatefulParse',
  ) where

import ClassyPrelude

import Control.Applicative              (many)
import Text.Parsec                      (anyChar)
import Text.Parsec.Text                 (Parser)

import Oscar.Utilities                  (simpleParse)
import Oscar.Utilities                  (type (‚Åû))
import Oscar.Utilities                  (un∆≠)
import Oscar.Utilities                  (∆≠)

-- | Allows for parsing with type-level state transitions.
--
-- For example:
--
-- @
-- data AtTheBeginning
-- data SomewhereInTheMiddle
-- data AtTheEnd
--
--     instance StatefulParse Text Beginning Middle where
--         statefulParse = ∆≠ $ string "Hello, " *>
--
--     instance StatefulParse Text Middle End where
--         statefulParse = ∆≠ $ pack <$> many anyChar
--
--     fullText ‚à∑ Text ‚Åû AtTheBeginning
--     fullText = pack $ "Hello, World!"
--
--     parseHelloSomeone ‚à∑ (Text ‚Åû SomewhereInTheMiddle, Text ‚Åû AtTheEnd)
--     parseHelloSomeone = do
--         (beginningToMiddleValue, middleToEndText) ‚Üê runStatefulParse fullText
--         (middleToEndValue, _) ‚Üê runStatefulParse fullText
-- @
--
-- Don't you love type safety?
class StatefulParse value state1 state2 | value state1 ‚Üí state2 where
    statefulParse ‚à∑ Parser value ‚Åû state1

    -- | The default implementation uses 'simpleParse'.
    runStatefulParse ‚à∑ Text ‚Åû state1 ‚Üí (value, Text ‚Åû state2)
    runStatefulParse = simpleParse p' . un∆≠
      where
        p' ‚à∑ Parser (value, Text ‚Åû state2)
        p' = do
            v ‚Üê un∆≠ (statefulParse ‚à∑ Parser value ‚Åû state1)
            r ‚Üê pack <$> many anyChar
            return (v, ∆≠ r)











{-# LANGUAGE NoImplicitPrelude #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE UnicodeSyntax #-}
module Oscar.Utilities where

import ClassyPrelude hiding (
    try,
    undefined,
    )
import Prelude                          (undefined)

import Control.Applicative              (liftA2)
import Control.Conditional              (ifM)
import Control.Conditional              (ToBool)
import Control.Monad                    (MonadPlus)
import Control.Monad                    (mzero)
import Control.Monad.Free               (Free(Free))
import Control.Monad.Free               (Free(Pure))
import Data.Either.Utils                (maybeToEither)
import Data.Pointed                     (point)
import Data.Pointed                     (Pointed)
import Text.Parsec                      (anyChar)
import Text.Parsec                      (getInput)
import Text.Parsec                      (lookAhead)
import Text.Parsec                      (manyTill)
import Text.Parsec                      (ParsecT)
import Text.Parsec                      (runParser)
import Text.Parsec                      (satisfy)
import Text.Parsec                      (setInput)
import Text.Parsec                      (try)
import Text.Parsec.Text                 (Parser)
import Text.Show.Pretty                 (ppShow)

simplify :: Free [] a -> Free [] a
simplify (Free [a]) = simplify a
simplify (Free as)  = Free $ map simplify as
simplify (Pure a)   = Pure a

eitherOr ::
    a ->
    (a -> Maybe b) ->
    Either a b
eitherOr a f = maybeToEither a (f a)

mconcatRightPoints ::
    (Pointed p, Semigroup s, p r ~ s) =>
    [Either l r] ->
    [Either l s]
mconcatRightPoints [] = []
mconcatRightPoints (Left l : xs) = Left l : mconcatRightPoints xs
mconcatRightPoints (Right r : xs) = case mconcatRightPoints xs of
    (Right rs : ys) -> Right (point r <> rs) : ys
    ys              -> Right (point r      ) : ys

joinFree :: Functor f => Free f (f a) -> Free f a
joinFree (Pure as) = Free (map Pure as)
joinFree (Free fs) = Free $ map joinFree fs

--
eol :: Parser String
eol = map pure lf <|> (try $ liftA2 (:) cr (map pure lf))

lf :: Parser Char
lf = satisfy (== '\n')

cr :: Parser Char
cr = satisfy (== '\r')

unlessM :: (ToBool bool, MonadPlus m) => m bool -> m a -> m a
unlessM c a = ifM c mzero a

--
messageFromShow :: Show a => a -> IO ()
messageFromShow = putStrLn . pack . ppShow

messageFromShows :: Show a => [a] -> IO ()
messageFromShows = sequence_ . map messageFromShow

messageFromShows10 :: Show a => String -> [a] -> IO ()
messageFromShows10 s xs = do
    print s
    messageFromShows $ take 10 xs











(>>)
    :: Tagged (state1, state2) (Parser a) 
    -> Tagged (state2, state3) (Parser b)
    -> Tagged (state1, state3) (Parser b)

return
    :: a
    -> Tagged (state1, state2) (Parser a)

(>>=)
    :: Tagged (state1, state2) (Parser a)
    -> (a -> Tagged (state2, state3) (Parser b))
    -> Tagged (state1, state3) (Parser b)

runTaggedParser 
    :: Tagged (state1, state2) (Parser a)
    -> Tagged state1 Text
    -> (a, Tagged state2 Text)

numberParser :: Tagged (∆ÆAfterNumberLabel, ∆ÆAfterNumber) (Parser ProblemNumber)

descriptionParser :: Tagged (∆ÆAfterNumber, ∆ÆEndOfDescription) (Parser ProblemDescription)

thing1Parser :: Tagged (∆ÆEndOfDescription, ()) (Parser Thing1)

thing2Parser :: Tagged (∆ÆEndOfDescription, ()) (Parser Thing2)

foo :: Tagged (∆ÆAfterNumberLabel, ()) (Parser Problem)
foo = do
    number <- numberParser
    description <- descriptionParser    
    thing1 <- thing1Parser
    thing2 <- thing2Parser
    return $ Problem number description thing1 thing2

problemFromText ‚à∑ (Text ‚Åû ∆ÆAfterNumberLabel)  
                  -- ^ The input must begin at the problem number (after the 
                  --   label, \"Problem #\"). Possibly as obtained from 
                  --   'evalStatefulParser'.
                ‚Üí Problem
problemFromText t = Problem
    number
    description
    (sectionElements afterDescription)
    (sectionElements afterDescription)
    (sectionElements afterDescription)
    (sectionElements afterDescription)
    (sectionElements afterDescription)
    (sectionElements afterDescription)
  where
    (number     , afterNumber     ) = runStatefulParser t
    (description, afterDescription) = runStatefulParser afterNumber
