-- Data: init commit

--{-# OPTIONS --show-implicit #-}
--{-# OPTIONS --rewriting #-}
module Oscar.Data0 where

data ⟦⟧ : Set where
  ∅ : ⟦⟧
  ! : ⟦⟧ → ⟦⟧

data ⟦_⟧ {a} (A : Set a) : Set a where
  ∅ : ⟦ A ⟧
  _∷_ : A → ⟦ A ⟧ → ⟦ A ⟧

data ⟦⟧[_] : ⟦⟧ → Set where
  ∅ : ∀ {n} → ⟦⟧[ ! n ]
  ! : ∀ {n} → ⟦⟧[ n ] → ⟦⟧[ ! n ]

data ⟦_⟧[_] {a} (A : ⟦⟧ → Set a) : ⟦⟧ → Set a where
  ∅ : ∀ {n} → ⟦ A ⟧[ ! n ]
  _∷_ : ∀ {n} → A n → ⟦ A ⟧[ n ] → ⟦ A ⟧[ ! n ]

data ⟦⟧[_≤↓_] (m : ⟦⟧) : ⟦⟧ → Set where
  ∅ : ⟦⟧[ m ≤↓ m ]
  ! : ∀ {n} → ⟦⟧[ m ≤↓ n ] → ⟦⟧[ m ≤↓ ! n ]

data ⟦_⟧[_≤↓_] {a} (A : ⟦⟧ → Set a) (m : ⟦⟧) : ⟦⟧ → Set a where
  ∅ : ⟦ A ⟧[ m ≤↓ m ]
  _∷_ : ∀ {n} → A n → ⟦ A ⟧[ m ≤↓ n ] → ⟦ A ⟧[ m ≤↓ ! n ]

data ⟦⟧[_↑≤_] (m : ⟦⟧) : ⟦⟧ → Set where
  ∅ : ⟦⟧[ m ↑≤ m ]
  ! : ∀ {n} → ⟦⟧[ ! m ↑≤ n ] → ⟦⟧[ m ↑≤ n ]

data ⟦_⟧[_↑≤_] {a} (A : ⟦⟧ → Set a) (m : ⟦⟧) : ⟦⟧ → Set a where
  ∅ : ⟦ A ⟧[ m ↑≤ m ]
  _∷_ : ∀ {n} → A m → ⟦ A ⟧[ ! m ↑≤ n ] → ⟦ A ⟧[ m ↑≤ n ]

data ⟦⟧[_↓≤↓_] : ⟦⟧ → ⟦⟧ → Set where
  ∅ : ∀ {n} → ⟦⟧[ ∅ ↓≤↓ n ]
  ! : ∀ {m n} → ⟦⟧[ m ↓≤↓ n ] → ⟦⟧[ ! m ↓≤↓ ! n ]

data ⟦_⟧[_↓≤↓_] {a} (A : ⟦⟧ → ⟦⟧ → Set a) : ⟦⟧ → ⟦⟧ → Set a where
  ∅ : ∀ {n} → ⟦ A ⟧[ ∅ ↓≤↓ n ]
  ! : ∀ {m n} → A m n → ⟦ A ⟧[ m ↓≤↓ n ] → ⟦ A ⟧[ ! m ↓≤↓ ! n ]



-- open import Oscar.Data.Unit
-- open import Oscar.Level
-- open import Data.Empty

-- 𝕋 : ∀ {a} {A : Set a} → A → Set
-- 𝕋 = λ _ → ⊤

-- postulate
--   ℓ : Level
--   Term : Set ℓ



-- -- module _ where -- second constructor is recursive

-- --   -- Nat
-- --   data ⟦⟧ : Set where
-- --     ∅ : ⟦⟧
-- --     ! : ⟦⟧ → ⟦⟧

-- --   -- List
-- --   data ⟦_⟧ {a} (A : Set a) : Set a where
-- --     ∅ : ⟦ A ⟧
-- --     _∷_ : A → ⟦ A ⟧ → ⟦ A ⟧

-- --   -- ⋆⋆ m, size: m
-- --   -- [ 0 ] = nothing
-- --   -- [ 1 ] = ∅0
-- --   -- [ 4 ] = ∅3 or !2∅3 or !1!2∅3 or !0!1!2∅3
-- --   data ⟦⟧[_] : ⟦⟧ → Set where
-- --     ∅ : ∀ {n} → ⟦⟧[ ! n ]
-- --     ! : ∀ {n} → ⟦⟧[ n ] → ⟦⟧[ ! n ]

-- --   data ⟦_⟧[_] {a} (A : ⟦⟧ → Set a) : ⟦⟧ → Set a where
-- --     ∅ : ∀ {n} → ⟦ A ⟧[ ! n ]
-- --     _∷_ : ∀ {n} → A n → ⟦ A ⟧[ n ] → ⟦ A ⟧[ ! n ]

-- --   -- 0 : ∅ (only)
-- --   -- 1 : ∅ or ! ∅
-- --   -- 2 : ∅ or ! ∅
-- --   -- 5 : ∅ or !
-- --   -- size: m + 1
-- --   -- ⋆⋆'' 0 = ∅0
-- --   -- ⋆⋆'' 4 = ∅(m=4) or !3∅4 or !2!3∅4 or !1!2!3∅4 or !0!1!2!3∅4
-- --   data ⋆⋆'' (m : ⟦⟧) : Set where
-- --     ∅ : ⋆⋆'' m
-- --     ! : ⋆⋆'' (! m) → ⋆⋆'' m

-- --   -- ⋆⋆'' ⊂ ⋆⋆

-- --   -- m ≤ n == n - 1 ⋱ m
-- --   -- m ↙ n
-- --   -- size = n - m
-- --   -- AList
-- --   -- 4≤↓2 = nothing
-- --   -- 2≤↓4 = !23!22∅22
-- --   data ⟦⟧[_≤↓_] (m : ⟦⟧) : ⟦⟧ → Set where
-- --     ∅ : ⟦⟧[ m ≤↓ m ]
-- --     ! : ∀ {n} → ⟦⟧[ m ≤↓ n ] → ⟦⟧[ m ≤↓ ! n ]
-- --     -- A n

-- --   （_⋱_］ : ⟦⟧ → ⟦⟧ → Set
-- --   （ n ⋱ m ］ = ⟦⟧[ m ≤↓ n ]

-- --   data ⟦_⟧[_≤↓_] {a} (A : ⟦⟧ → Set a) (m : ⟦⟧) : ⟦⟧ → Set where
-- --     ∅ : ⟦ A ⟧[ m ≤↓ m ]
-- --     ! : ∀ {n} → A n → ⟦ A ⟧[ m ≤↓ n ] → ⟦⟧[ m ≤↓ ! n ]

-- --   -- m ≤ n = m ⋰ n - 1
-- --   -- m ↗ n
-- --   -- size = n - m (+1?)
-- --   -- 2↑≤4 = !24!34∅44
-- --   data _↑≤_ (m : ⟦⟧) : ⟦⟧ → Set where
-- --     ∅ : m ↑≤ m
-- --     ! : ∀ {n} → ! m ↑≤ n → m ↑≤ n
-- --     -- A m

-- --   ［_⋰_） : ⟦⟧ → ⟦⟧ → Set
-- --   ［ m ⋰ n ） = m ↑≤ n

-- --   -- m ≤ n == n - 1 ⋱ n - m && m - 1 ⋱ 0
-- --   -- size = m (+1?)
-- --   -- Inj
-- --   -- 2↓≤↓4 = !13!02∅02
-- --   data _↓≤↓_ : ⟦⟧ → ⟦⟧ → Set where
-- --     ∅ : ∀ {n} → ∅ ↓≤↓ n
-- --     ! : ∀ {m n} → m ↓≤↓ n → ! m ↓≤↓ ! n -- A m n

-- --   -- Fin
-- --   -- P 0 = ∅0 or !0∅1 or !0!1∅2 or ...
-- --   -- P 3 = ∅3 or !3∅4 or !3!4∅5 or ... (infinite)
-- --   data P (n : ⋆) : Set where
-- --     ∅ : P n
-- --     ! : P (! n) → P n

-- --   {-
-- --     3 <= 5 = ! (4 <= 5) = ! ! (5 <= 5) = ! ! ∅
-- --     3≤5 witnesses
-- --     n=3,m=5
-- --       4   5
-- --   -}
-- --   -- m ≤ n == m ... n - 1 (this is the same as the two-indexed version)
-- --   data _≤_ (n : ⋆) : ⋆ → Set where
-- --     ∅ : n ≤ n
-- --     ! : ∀ {m} → ! n ≤ m → n ≤ m
-- --   -- or
-- --   -- m ≤ n == n - 1 ... m

-- --   three : ⋆
-- --   three = ! (! (! ∅))

-- --   five : ⋆
-- --   five = ! (! three)

-- --   foo : three ≤ five
-- --   foo = ! {n = {!!}} (! {n = {!!}} ∅)


-- -- --   {-
-- -- --     3 <= 5 = 3 <= ! 4 = ! (3 <= 4) = ! (! (3 <= 3)) = ! ! ∅
-- -- --     3 ≤ 5 witnesses
-- -- --     n=3,m=4
-- -- --     n=3,m=3
-- -- --
-- -- --   -}

-- -- --   data _≤_ (n : ⋆) : ⋆ → Set where
-- -- --     ∅ : n ≤ n
-- -- --     ! : ∀ {m} → n ≤ m → n ≤ ! m -- A m

-- -- --   {-
-- -- --     3 <= 5
-- -- --     m=2,n=4
-- -- --     m=1,n=3
-- -- --     m=0,n=2
-- -- --   -}
-- -- --   data _≤_ : ⋆ → ⋆ → Set where
-- -- --     ∅ : ∀ {n} → ∅ ≤ n
-- -- --     ! : ∀ {m n} → m ≤ n → ! m ≤ ! n


-- -- -- --   data # (n : ⋆) : Set where
-- -- -- --     ∅ : # n
-- -- -- --     ! : # (

-- -- -- --   data # : ⋆ → Set where
-- -- -- --     ∅ : # n
-- -- -- --     ! : ⋆


-- -- -- --   data ⋆[_] {a} (A : Set a) : Set a where
-- -- -- --     ∅ : ⋆[ A ]
-- -- -- --     _∷_ : A → ⋆[ A ] → ⋆[ A ]

-- -- -- --   data _≥_ (n : ⋆) : ⋆ → Set where
-- -- -- --     ∅ : n ≥ n
-- -- -- --     ! : ∀ {m} → n ≥ ¹⁺ m → n ≥ m

-- -- -- -- {-
-- -- -- --   data _≤_ (n : ⋆) : ⋆ → Set where
-- -- -- --     ∅ : n ≤ n
-- -- -- --     ! : ∀ {m} → n ≤ m → n ≤ ¹⁺ m
-- -- -- -- -}
-- -- -- --   data _≥_ : ⋆ → ⋆ → Set where
-- -- -- --     ∅ : ∀ {n} → n ≥ ∅
-- -- -- --     ! : ∀ {m n} → n ≥ m → ¹⁺ m ≤ ¹⁺ n

-- -- -- --   _≱_ : ⋆ → ⋆ → Set
-- -- -- --   n ≱ m = n ≥ m → ⊥

-- -- -- --   ε : ∀ {m} → m ≥ m
-- -- -- --   ε = ≥∅

-- -- -- --   ¹⁺≥ : ∀ {n m} → n ≥ m → ¹⁺ n ≥ m
-- -- -- --   ¹⁺≥ ≥∅ = ≥⁻¹ ≥∅
-- -- -- --   ¹⁺≥ (≥⁻¹ n≥m) = ≥⁻¹ (¹⁺≥ n≥m)

-- -- -- --   ∅≱¹⁺ : ∀ {n} → ∅ ≱ ¹⁺ n
-- -- -- --   ∅≱¹⁺ (≥⁻¹ ∅≥²⁺n) = ∅≱¹⁺ ∅≥²⁺n

-- -- -- --   _∙_ : ∀ {n m} → n ≥ m → ∀ {l} → m ≥ l → n ≥ l
-- -- -- --   ≥∅ ∙ ≥∅ = ≥∅
-- -- -- --   ≥∅ ∙ ≥⁻¹ x₁ = ⊥-elim ({!∅≱¹⁺ !})
-- -- -- --   ≥⁻¹ x ∙ ≥∅ = {!!}
-- -- -- --   _∙_ {n} {m} (≥⁻¹ x) {l} (≥⁻¹ x₁) = ≥⁻¹ (x ∙ ¹⁺≥ x₁)

-- -- -- --   stop≥ : ∀ {n} → n ≱ ¹⁺ n
-- -- -- --   stop≥ {∅} (≥⁻¹ x) = ∅≱¹⁺ x
-- -- -- --   stop≥ {¹⁺ n} (≥⁻¹ (≥⁻¹ x)) = {!stop≥ x!}

-- -- -- --   ¹⁺≥¹⁺ : ∀ {n m} → n ≥ m → ¹⁺ n ≥ ¹⁺ m
-- -- -- --   ¹⁺≥¹⁺ {∅} ≥∅ = ≥⁻¹ {¹⁺ ∅} {!!}
-- -- -- --   ¹⁺≥¹⁺ {¹⁺ n} ≥∅ = {!!}
-- -- -- --   ¹⁺≥¹⁺ (≥⁻¹ x) = {!!}

-- -- -- --   ⁻¹≥⁻¹ : ∀ {n m} → ¹⁺ n ≥ ¹⁺ m → n ≥ m
-- -- -- --   ⁻¹≥⁻¹ {n} {∅} (≥⁻¹ x) = {!!}
-- -- -- --   ⁻¹≥⁻¹ {∅} {¹⁺ m} (≥⁻¹ x) = ⊥-elim (∅≱¹⁺ (⁻¹≥⁻¹ x))
-- -- -- --   ⁻¹≥⁻¹ {¹⁺ n} {¹⁺ m} (≥⁻¹ x) = (⁻¹≥⁻¹ x) ∙ ¹⁺≥ {!!}

-- -- -- -- --   1>=1 : ¹⁺ ∅ ≥ ¹⁺ ∅
-- -- -- -- --   1>=1 = ¹⁺ {!!}

-- -- -- -- --   {- ⋮↓ -}
-- -- -- -- --   {- h  ｛ A ∣ 7 ≥ 4 ｝ = ｛ A 7 4 , A 7 5 , A 7 6 , A 7 7 ｝ -}
-- -- -- -- --   {- g  ｛ A ∣ 4 ≥ 2 ｝ = ｛ A 4 2 , A 4 3 , A 4 4 ｝ -}
-- -- -- -- --   {- h∘g｛ A ∣ 7 ≥ 2 ｝ = ｛ A 7 2 , A 7 3 , A 7 4 , A 7 5 , A 7 6 , A 7 7 ｝ -}
-- -- -- -- --   {- f  ｛ A ∣ 2 ≥ 0 ｝ = ｛ ｝ -}
-- -- -- -- --   {- g∘f｛ A ∣ 4 ≥ 0 ｝ = ｛ A 4 0 , A 4 1 , A 4 2 , A 4 3 , A 4 4 ｝ -}
-- -- -- -- --   data ⋆[_/_≥_] {a} (A : ⋆ → ⋆ → Set a) (m : ⋆) : ⋆ → Set a where
-- -- -- -- --     ∅ : ⋆[ A / m ≥ ∅ ]
-- -- -- -- --     _∷_ : ∀ {n} → A m n → ⋆[ A / m ≥ ¹⁺ n ] → ⋆[ A / m ≥ n ]

-- -- -- -- --   _≥'_ : ⋆ → ⋆ → Set
-- -- -- -- --   m ≥' n = ⋆[ (λ _ _ → ⊤) / m ≥ n ]

-- -- -- -- --   data _≤_ : ⋆ → ⋆ → Set where
-- -- -- -- --     ∅ : ∀ {n} → ∅ ≤ n
-- -- -- -- --     ¹⁺_ : ∀ {m n} → m ≤ n → ¹⁺ m ≤ ¹⁺ n

-- -- -- -- --   {- ⃔⋱ -}
-- -- -- -- --   {- ｛ A ∣ 4 ≤ 7 ｝ = ｛ A 3 6 , A 2 5 , A 1 4 , A 0 3 ｝ -}
-- -- -- -- --   {- ｛ A ∣ 2 ≤ 4 ｝ = ｛ A 1 3 , A 0 2 ｝ -}
-- -- -- -- --   data ⋆[_/_≤_] {a} (A : ⋆ → ⋆ → Set a) : ⋆ → ⋆ → Set a where
-- -- -- -- --     ∅ : ∀ {n} → ⋆[ A / ∅ ≤ n ]
-- -- -- -- --     _∷_ : ∀ {m n} → A m n → ⋆[ A / m ≤ n ] → ⋆[ A / ¹⁺ m ≤ ¹⁺ n ]

-- -- -- -- -- --   ---- indices on first and second constructors: 1 and 2
-- -- -- -- -- --   data ⋆[_,_] : ⋆ → ⋆ → Set where
-- -- -- -- -- --     ∅ : ∀ {n} → ⋆[ n , n ]
-- -- -- -- -- --     ! : ∀ {m n} → ⋆[ m , n ] → ⋆[ m , ! n ]

-- -- -- -- -- --   data ⋆[_,_] : ⋆ → ⋆ → Set where
-- -- -- -- -- --     ∅ : ∀ {m n} → ⋆[ m , n ]
-- -- -- -- -- --     ! : ∀ {m n} → ⋆[ m , n ] → ⋆[ ! m , ! n ]

-- -- -- -- -- --   -- ?
-- -- -- -- -- --   data _≛_ : ⋆ → ⋆ → Set where
-- -- -- -- -- --     ∅ : ∅ ≛ ∅
-- -- -- -- -- --     ! : ∀ {m} → ⋆[ m , m ] → ⋆[ ! m , ! m ]

-- -- -- -- -- --   data [_/_↦_] {a} (A : ⋆ → ⋆ → Set a) : ⋆ → ⋆ → Set a where
-- -- -- -- -- --     ∅ : ∀ {n} → [ A / ∅ ↦ n ]
-- -- -- -- -- --     ! : ∀ {m n} → A m n → [ A / ! m ↦ ! n ]

-- -- -- -- -- -- module _ where -- Two constructors, where the second constructor adds a payload and a recursive element

-- -- -- -- -- -- -- List
-- -- -- -- -- -- data [_] {a} (A : Set a) : Set a where
-- -- -- -- -- --   ∅ : [ A ]
-- -- -- -- -- --   _,_ : A → [ A ] → [ A ]

-- -- -- -- -- -- -- Fin
-- -- -- -- -- -- ⋆[_] = ⋆[ ∅ ,_]

-- -- -- -- -- -- record ⊤ : Set where

-- -- -- -- -- -- record ∃ {a} {A : Set a} {b} (B : A → Set b) : Set (a ⊔ b) where
-- -- -- -- -- --   field
-- -- -- -- -- --     ⟱ : A
-- -- -- -- -- --     ⟰ : B ⟱

-- -- -- -- -- -- syntax ∃ (λ x → f) = ∃[ x ] f

-- -- -- -- -- -- _×_ : ∀ {a} (A : Set a) {b} (B : Set b) → Set (a ⊔ b)
-- -- -- -- -- -- A × B = ∃ {A = A} (λ _ → B)

-- -- -- -- -- -- --
-- -- -- -- -- -- [_↦_] : ⋆ → ⋆ → Set
-- -- -- -- -- -- [_↦_] = [ (λ m n → ⋆[ ! m ] × {![ m ↦ n ]!}) /_↦_]

-- -- -- -- --   -- open import Agda.Builtin.Equality
-- -- -- -- --   -- open import Data.Empty
