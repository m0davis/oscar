
module Oscar.Data.Term.instances.ThickAndThin {ùî£} (FunctionName : Set ùî£) where

open import Oscar.Data.Term.Core FunctionName
open import Oscar.Data.Term.Injectivity FunctionName
open import Oscar.Data.Term.AlphaConversion FunctionName
open import Oscar.Data.Fin
--open import Oscar.Data.Fin.Core
--open import Oscar.Data.Fin.instances.ThickAndThin
open import Oscar.Data.Nat.Core
open import Oscar.Data.Vec.Core
open import Oscar.Data.Equality
open import Oscar.Class.ThickAndThin
open import Oscar.Function

private

  thin-Term : ‚àÄ {n} ‚Üí Fin (suc n) ‚Üí Term n ‚Üí Term (suc n)
  thin-Term = _‚óÇ_ ‚àò thin

  thin-Terms : ‚àÄ {n N} ‚Üí Fin (suc n) ‚Üí Vec (Term n) N ‚Üí Vec (Term (suc n)) N
  thin-Terms = _‚óÇs_ ‚àò thin

  mutual

    thin-injective-Term : ‚àÄ {n} (z : Fin (suc n)) {x y : Term n} ‚Üí thin-Term z x ‚â° thin-Term z y ‚Üí x ‚â° y
    thin-injective-Term x‚ÇÅ {i x} {i x‚ÇÉ} x‚ÇÇ = {!!} -- cong i (thinfact1 x‚ÇÅ (term-i-inj x‚ÇÇ))
    thin-injective-Term x‚ÇÅ {i x} {leaf} ()
    thin-injective-Term x‚ÇÅ {i x} {y fork y‚ÇÅ} ()
    thin-injective-Term x‚ÇÅ {i x} {function x‚ÇÇ x‚ÇÉ} ()
    thin-injective-Term x‚ÇÅ {leaf} {i x} ()
    thin-injective-Term x‚ÇÅ {leaf} {leaf} x‚ÇÇ = refl
    thin-injective-Term x‚ÇÅ {leaf} {y fork y‚ÇÅ} ()
    thin-injective-Term x‚ÇÅ {leaf} {function x x‚ÇÇ} ()
    thin-injective-Term x‚ÇÅ {x fork x‚ÇÇ} {i x‚ÇÉ} ()
    thin-injective-Term x‚ÇÅ {x fork x‚ÇÇ} {leaf} ()
    thin-injective-Term x‚ÇÅ {x fork x‚ÇÇ} {y fork y‚ÇÅ} x‚ÇÉ = {!!} -- cong‚ÇÇ _fork_ (thin-injective-Term x‚ÇÅ (term-fork-l-inj x‚ÇÉ)) ((thin-injective-Term x‚ÇÅ (term-fork-r-inj x‚ÇÉ)))
    thin-injective-Term x‚ÇÅ {x fork x‚ÇÇ} {function x‚ÇÉ x‚ÇÑ} ()
    thin-injective-Term x‚ÇÅ {function x x‚ÇÇ} {i x‚ÇÉ} ()
    thin-injective-Term x‚ÇÅ {function x x‚ÇÇ} {leaf} ()
    thin-injective-Term x‚ÇÅ {function x x‚ÇÇ} {y fork y‚ÇÅ} ()
    thin-injective-Term x‚ÇÅ {function f1 {n} ts1} {function f2 ts2} r rewrite Term-function-inj-FunctionName r with Term-function-inj-VecSize r
    thin-injective-Term x‚ÇÅ {function f1 {n} ts1} {function f2 ts2} r | refl with Term-function-inj-Vector r
    thin-injective-Term {m} x‚ÇÅ {function f1 {n} ts1} {function f2 {.n} ts2} r | refl | w = cong (function f2) (((thin-injective-Terms x‚ÇÅ w)))

    thin-injective-Terms : ‚àÄ {N} {n} (f : Fin (suc n)) ‚Üí {x y : Vec (Term n) N} ‚Üí thin-Terms f x ‚â° thin-Terms f y ‚Üí x ‚â° y
    thin-injective-Terms {.0} f {[]} {[]} x‚ÇÅ = refl
    thin-injective-Terms {.(suc _)} f {x ‚à∑ x‚ÇÅ} {x‚ÇÇ ‚à∑ y} x‚ÇÉ = {!!} -- cong‚ÇÇ _‚à∑_ (thin-injective-Term f (cong Data.Vec.head x‚ÇÉ)) (thin-injective-Terms f (cong Data.Vec.tail x‚ÇÉ))

instance ThickAndThinTerm : ThickAndThin Term
ThickAndThin.thin ThickAndThinTerm = thin-Term
ThickAndThin.thick ThickAndThinTerm x = {!!} -- flip mapTerm x ‚àò flip thick
ThickAndThin.thin-injective ThickAndThinTerm = {!!}
ThickAndThin.thick‚àòthin=id ThickAndThinTerm = {!!}
ThickAndThin.check ThickAndThinTerm = {!!}
ThickAndThin.thin-check-id ThickAndThinTerm = {!!}
