
module Oscar.Data.Term.Injectivity {ùî£} (FunctionName : Set ùî£) where

open import Oscar.Data.Term.Core FunctionName

open import Data.Fin
open import Data.Nat
open import Data.Vec
open import Relation.Binary.PropositionalEquality

Term-function-inj-FunctionName : ‚àÄ {fn‚ÇÅ fn‚ÇÇ} {n N‚ÇÅ N‚ÇÇ} {ts‚ÇÅ : Vec (Term n) N‚ÇÅ} {ts‚ÇÇ : Vec (Term n) N‚ÇÇ} ‚Üí Term.function fn‚ÇÅ ts‚ÇÅ ‚â° Term.function fn‚ÇÇ ts‚ÇÇ ‚Üí fn‚ÇÅ ‚â° fn‚ÇÇ
Term-function-inj-FunctionName refl = refl

Term-function-inj-VecSize : ‚àÄ {fn‚ÇÅ fn‚ÇÇ} {n N‚ÇÅ N‚ÇÇ} {ts‚ÇÅ : Vec (Term n) N‚ÇÅ} {ts‚ÇÇ : Vec (Term n) N‚ÇÇ} ‚Üí Term.function fn‚ÇÅ ts‚ÇÅ ‚â° Term.function fn‚ÇÇ ts‚ÇÇ ‚Üí N‚ÇÅ ‚â° N‚ÇÇ
Term-function-inj-VecSize refl = refl

Term-function-inj-Vector : ‚àÄ {fn‚ÇÅ fn‚ÇÇ} {n N} {ts‚ÇÅ : Vec (Term n) N} {ts‚ÇÇ : Vec (Term n) N} ‚Üí Term.function fn‚ÇÅ ts‚ÇÅ ‚â° Term.function fn‚ÇÇ ts‚ÇÇ ‚Üí ts‚ÇÅ ‚â° ts‚ÇÇ
Term-function-inj-Vector refl = refl

Term-fork-inj-left : ‚àÄ {n} {l‚ÇÅ r‚ÇÅ l‚ÇÇ r‚ÇÇ : Term n} ‚Üí l‚ÇÅ fork r‚ÇÅ ‚â° l‚ÇÇ fork r‚ÇÇ ‚Üí l‚ÇÅ ‚â° l‚ÇÇ
Term-fork-inj-left refl = refl

Term-fork-inj-right : ‚àÄ {n} {l‚ÇÅ r‚ÇÅ l‚ÇÇ r‚ÇÇ : Term n} ‚Üí l‚ÇÅ fork r‚ÇÅ ‚â° l‚ÇÇ fork r‚ÇÇ ‚Üí r‚ÇÅ ‚â° r‚ÇÇ
Term-fork-inj-right refl = refl
