
module Oscar.Data where

open import Agda.Builtin.Unit
open import Oscar.Function
open import Oscar.Level

infixr 20 โท_
infixr 20 _โท_

data NAT : Set where
  โ : NAT
  โท_ : NAT โ NAT

testNAT : NAT
testNAT = โท โท โท โ

-- List
data โฆ_โง {a} (A : Set a) : Set a where
  โ : โฆ A โง
  _โท_ : A โ โฆ A โง โ โฆ A โง

-- Nat
โฆโง = โฆ โค โง

testโฆโง : โฆโง
testโฆโง = {!(tt โท_) โ !}

infix 21 ยก_
pattern ยก_ โฆAโง = tt โท โฆAโง
--ยก : โฆโง โ โฆโง
--ยก โฆAโง = tt โท โฆAโง

-- Fin (with a payload)
data โฆ_โง[_] {a} (A : โฆโง โ Set a) : โฆโง โ Set a where
  โ : โ {n} โ โฆ A โง[ ยก n ]
  _โท_ : โ {n} โ A n โ โฆ A โง[ n ] โ โฆ A โง[ ยก n ]

โฆโง[_] = โฆ const โค โง[_]

-- Vec (with an (optional) index)
data โฆ_โง[_โ] {a} (A : โฆโง โ Set a) : โฆโง โ Set a where
  โ : โฆ A โง[ โ โ]
  _โท_ : โ {n} โ A n โ โฆ A โง[ n โ] โ โฆ A โง[ ยก n โ]

โฆโง[_โ] = โฆ const โค โง[_โ]

-- m โค n, counting down from n-1 to m
data โฆ_โง[_โค_โ] {a} (A : โฆโง โ Set a) (m : โฆโง) : โฆโง โ Set a where
  โ : โฆ A โง[ m โค m โ]
  _โท_ : โ {n} โ A n โ โฆ A โง[ m โค n โ] โ โฆ A โง[ m โค ยก n โ]

โฆโง[_โค_โ] = โฆ const โค โง[_โค_โ]

-- m โค n, counting up from m to n-1
data โฆ_โง[โ_โค_] {a} (A : โฆโง โ Set a) (m : โฆโง) : โฆโง โ Set a where
  โ : โฆ A โง[โ m โค m ]
  _โท_ : โ {n} โ A m โ โฆ A โง[โ ยก m โค n ] โ โฆ A โง[โ m โค n ]

โฆโง[โ_โค_] = โฆ const โค โง[โ_โค_]

-- Inj (almost)
data โฆ_โง[โ_โค_โ] {a} (A : โฆโง โ โฆโง โ Set a) : โฆโง โ โฆโง โ Set a where
  โ : โ {n} โ โฆ A โง[โ โ โค n โ]
  _โท_ : โ {m n} โ A m n โ โฆ A โง[โ m โค n โ] โ โฆ A โง[โ ยก m โค ยก n โ]

โฆโง[โ_โค_โ] = โฆ const const โค โง[โ_โค_โ]

infix 21 โผ_
pattern โผ_ โฆAโง = tt โท โฆAโง -- tricky, works for all above _โท_ constructors only because it is defined afterwards, won't work for any later-defined constructors

{-

Function (B m โ B n)

Fin
Term
AList (SubstitutionList) Substilist
Step
List

FinTerm (SubstitutionFunction) Substifunction

SubstitutionFunction.internal
SubstitutionFunction.Morphism
SubstitutionFunction.IsSemigroupoid
SubstitutionFunction.IsCategory

IsSemigroupoid
IsCategory



-}
--Nat = โฆโง
--Vec :

-- mutual

--   Terms : Nat โ Nat โ Set ๐ฃ
--   Terms N m = Vec (Term m) N

--   data Term (m : Nat) : Set ๐ฃ where
--     i : (x : Fin m) โ Term m
--     leaf : Term m
--     _fork_ : (s t : Term m) โ Term m
--     function : FunctionName โ โ {N} โ Terms N m โ Term m
