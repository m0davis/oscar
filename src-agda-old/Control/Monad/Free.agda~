module Control.Monad.Free where

open import Level using (_⊔_; lift)
open import Relation.Binary
open import Data.List.Base
open import Relation.Binary.PropositionalEquality using (_≡_)
-- import Data.AVL
-- open Data.AVL.Indexed
open import Data.Maybe using (Maybe; nothing; just)
open import Data.Nat.Base using (ℕ; suc)

data Free { α φ } ( f : Set α → Set φ ) ( a : Set α ) : Set ( Level.suc ( α ⊔ φ ) ) where
  pure : a → Free f a
  free : ∀ { x : Set α } → ( x → Free f a ) → f x → Free f a
