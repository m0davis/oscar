open import Level
open import Relation.Binary
open import Relation.Binary.PropositionalEquality using (_РЅА_)
 
module Tree { ­ЮЉ╝РЪеKeyРЪЕ ­ЮЉ╝РЪеValueРЪЕ ­ЮЉ╝РЪе<рхЈРЪЕ : Level }
            { Key : Set ­ЮЉ╝РЪеKeyРЪЕ }
            ( Value : Set ­ЮЉ╝РЪеValueРЪЕ )
            { _<рхЈ_ : Rel Key ­ЮЉ╝РЪе<рхЈРЪЕ }
            ( isStrictTotalOrder : IsStrictTotalOrder _РЅА_ _<рхЈ_ )
  where
 
  open import Data.List.Base
  open import Data.AVL (╬╗ _ Рєњ Value) isStrictTotalOrder hiding ( module Indexed ) public
  open import Data.AVL.Properties (╬╗ _ Рєњ Value) isStrictTotalOrder hiding ( module Indexed ) public

  module Indexed where
    import Data.AVL
    open Data.AVL.Indexed (╬╗ _ Рєњ Value) isStrictTotalOrder public
    import Data.AVL.Properties
    open Data.AVL.Properties.Indexed (╬╗ _ Рєњ Value) isStrictTotalOrder public
    -- open Indexed public
    -- open import Data.AVL.Properties (╬╗ _ Рєњ Value) isStrictTotalOrder using ( module Data.AVL.Properties.Indexed public
  
  open import Function
  open import Data.Product
 
  keys : Tree Рєњ List Key
  keys = Data.List.Base.map projРѓЂ Рѕў toList

  elems : Tree Рєњ List Value
  elems = Data.List.Base.map projРѓѓ Рѕў toList
